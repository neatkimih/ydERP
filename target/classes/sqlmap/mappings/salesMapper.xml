<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="sales">

	<!-- 판매 내역 기본 조회 -->
	<select id="getSaleList" resultType="sales">
		SELECT S.*, C.CUSTOMER_NAME  
		FROM SALES S JOIN CUSTOMERS C 
		ON S.CUSTOMER_CODE = C.CUSTOMER_CODE 
		WHERE ORDER_PERMIT = 'Y' 
		ORDER BY SALE_CODE
	</select>

	<!-- 판매 내역 상세 조회 -->
	<!-- JQGRID MASTER에서 선택된 ROW의 SALE_CODE값을 가져와서 DETAIL을 조회 -->
	<select id="getSaleDetail" resultType="saleDetails">
		SELECT SD.*, V.VENDOR_NAME 
		FROM SALE_DETAILS SD JOIN VENDORS V 
		ON SD.VENDOR_CODE = V.VENDOR_CODE 
		WHERE SALE_CODE = #{saleCode} 
		ORDER BY SALE_DETAIL_CODE
	</select>
	
	<!-- 판매 내역 검색 -->
	<select id="getSaleByCondition" resultType="sales">
		<![CDATA[
			SELECT S.*, C.CUSTOMER_NAME 
			FROM SALES S JOIN CUSTOMERS C 
			ON S.CUSTOMER_CODE = C.CUSTOMER_CODE 
			WHERE ORDER_PERMIT = 'Y' 
		]]>
		<if test="saleCode != null and saleCode != ''">
			AND SALE_CODE LIKE '%' || #{saleCode} || '%' 
		</if>
		<if test="customerName != null and customerName != ''">
			AND C.CUSTOMER_NAME LIKE '%' || #{customerName} || '%' 
		</if>
		<if test="saleDate != null and saleDate != ''">
			<![CDATA[
				AND TRUNC(SALE_DATE) = TO_DATE(#{saleDate}, 'yyyy-mm-dd') 
			]]>
		</if>
		<if test="saleCost != null and saleCost != ''">
			AND SALE_COST = #{saleCost} 	
		</if>
		<if test="deliveryAddr != null and deliveryAddr != ''">
			AND DELIVERY_ADDR LIKE '%' || #{deliveryAddr} || '%' 
		</if>
		<if test="deliveryStatus != null and deliveryStatus != ''">
			AND DELIVERY_STATUS = #{deliveryStatus} 
		</if>
		<if test="payStatus != null and payStatus != ''">
			AND PAY_STATUS = #{payStatus} 
		</if>
		ORDER BY SALE_CODE
	</select>
	
	<!-- 주문 등록 : 주문 기본 정보 -->
	<insert id="insertOrder" parameterType="sales">
		INSERT INTO SALES (	SALE_CODE
							, SALE_DATE
							, CUSTOMER_CODE
							, SALE_COST
							, DELIVERY_ADDR
							, DELIVERY_STATUS
							, DELIVERY_DATE
							, PAY_STATUS
							, ORDER_PERMIT )
		VALUES ( #{saleCode}
				, SYSDATE
				, #{customerCode}
				, #{saleCost}
				, #{deliveryAddr}
				, 'N'
				, #{deliveryDate}
				, 'N'
				, 'N'		)
	</insert>
	
	<!-- 주문 수정 -->
	<!-- 수정 가능한 칼럼 : 마스터의 DELIVERY_ADDR-->
	<!-- 마스터에서 수정되어야 할 칼럼 : SALE_COST -->
	<!-- 주문 승인이 N으로 초기화된다 -->
	
	
	<!-- 주문 기본 조회 -->
	<select id="getOrderList" resultType="sales">
		SELECT S.*, C.CUSTOMER_NAME 
		FROM SALES S JOIN CUSTOMERS C 
		ON S.CUSTOMER_CODE = C.CUSTOMER_CODE 
		WHERE ORDER_PERMIT = 'N' 
		ORDER BY SALE_DATE DESC
	</select>

	<!-- 주문 상세 조회 -->
	<!-- JQGRID MASTER에서 선택된 ROW의 SALE_CODE값을 가져와서 DETAIL을 조회 -->
	<select id="getOrderDetail" resultType="saleDetails">
		SELECT SD.*, V.VENDOR_NAME 
		FROM SALE_DETAILS SD JOIN VENDORS V 
		ON SD.VENDOR_CODE = V.VENDOR_CODE 
		WHERE SALE_CODE = #{saleCode} 
		ORDER BY SALE_DETAIL_CODE
	</select>
	
	<!-- 주문 내역 검색 -->
	<select id="getOrderByCondition" resultType="sales">
		<![CDATA[
			SELECT S.*, C.CUSTOMER_NAME 
			FROM SALES S JOIN CUSTOMERS C 
			ON S.CUSTOMER_CODE = C.CUSTOMER_CODE 
			WHERE ORDER_PERMIT = 'N' 
		]]>
		<if test="saleCode != null and saleCode != ''">
			AND SALE_CODE LIKE '%' || #{saleCode} || '%' 
		</if>
		<if test="customerName != null and customerName != ''">
			AND C.CUSTOMER_NAME LIKE '%' || #{customerName} || '%' 
		</if>
		<if test="saleDate != null and saleDate != ''">
			<![CDATA[
				AND TRUNC(SALE_DATE) = TO_DATE(#{saleDate}, 'yyyy-mm-dd') 
			]]>
		</if>
		<if test="saleCost != null and saleCost != ''">
			AND SALE_COST = #{saleCost} 
		</if>
		<if test="deliveryAddr != null and deliveryAddr != ''">
			AND DELIVERY_ADDR LIKE '%' || #{deliveryAddr} || '%' 
		</if>
		ORDER BY SALE_DATE DESC
	</select>
	
	<!-- 주문 승인 -->
	<!-- 주문이 승인될 때 결정되는 칼럼(NULL처리) : SALE_DATE, DELIVERY_EMP, WAREHOUSE-->
	<!-- 주문이 승인될 때 변경되는 칼럼 : ORDER_PERMIT -->
	<!-- SALE_DATE : 주문 승인 일자 -->
	<!-- DELIVERY_EMP : 주문을 승인할 때 배송가능한 사원을 선택 -->
	<!-- WAREHOUSE : 주문을 승인할 때 출하창고를 선택 -->
	<update id="updateOrderStatus" parameterType="sales">
		UPDATE SALES 
		SET SALE_DATE = SYSDATE 
			, DELIVERY_EMP = #{deliveryEmp} 
			, WAREHOUSE = #{warehouse} 
			, ORDER_PERMIT = 'Y' 
			WHERE SALE_CODE = #{saleCode}
	</update>
	
	<!-- 주문 취소 -->
	<update id="deleteOrder" parameterType="sales">
		UPDATE SALES 
		SET ORDER_PERMIT = 'F' 
		WHERE SALE_CODE = #{saleCode}
	</update>
	
	<!-- 주문 후 품목 재고 변화 처리 -->
	<insert id="afterPermitOrder" parameterType="string"
		statementType="CALLABLE">
		<![CDATA[
		{call common.out_txn(#{_parameter})}
		]]>
	</insert>
	
	<!-- 승인 전 재고 수량 확인 -->
	<select id="getStock" resultType="com.yedam.erp.stocks.StockOnhandViewVO">
		SELECT * 
		FROM STOCK_ONHANDS 
		WHERE ITEM_CODE = #{saleItemCode} 
		ORDER BY ITEM_CODE	
	</select>
	
	<!-- 매출 차트 : 그룹 기준(월) -->
	<select id="getSaleChartYear" resultType="map">
		<![CDATA[
			SELECT 		TO_CHAR(TRUNC(S.SALE_DATE), 'YYYY-MM') AS "saleDay",
						SUM(SD.SALE_PRICE * SD.SALE_QTY) AS "saleSum" 
			FROM 		SALES S JOIN SALE_DETAILS SD ON S.SALE_CODE = SD.SALE_CODE 
	       						JOIN 		ITEMS I ON SD.SALE_ITEM_CODE = I.ITEM_CODE 
			WHERE 		S.ORDER_PERMIT = 'Y' AND TO_CHAR(TRUNC(S.SALE_DATE), 'YYYY') = #{saleDate} 
			GROUP BY	TO_CHAR(TRUNC(S.SALE_DATE), 'YYYY-MM')
			ORDER BY    1
		]]>
	</select>
	
	<!-- 매출 차트 : 그룹 기준(일) -->
	<select id="getSaleChartMonth" resultType="map">
		<![CDATA[
			SELECT 		TO_CHAR(TRUNC(S.SALE_DATE)) AS "saleDay",
					 	SUM((SD.SALE_PRICE) * SD.SALE_QTY) AS "saleSum" 
			FROM 		SALES S JOIN SALE_DETAILS SD ON S.SALE_CODE = SD.SALE_CODE 
	       						JOIN 		ITEMS I ON SD.SALE_ITEM_CODE = I.ITEM_CODE 
			WHERE 		S.ORDER_PERMIT = 'Y' AND TO_CHAR(TRUNC(S.SALE_DATE), 'YYYY-MM') = #{saleDate} 
			GROUP BY 	TO_CHAR(TRUNC(S.SALE_DATE))
            ORDER BY    1
		]]>
	</select>
	
	<!-- 순익 차트 : 그룹 기준(월)-->
	<select id="getProfitChartYear" resultType="map">
		<![CDATA[
			SELECT 		TO_CHAR(TRUNC(S.SALE_DATE), 'YYYY-MM') AS "profitDay", 
						SUM((SD.SALE_PRICE - I.SUPPLY_PRICE) * SD.SALE_QTY) AS "profitSum" 
			FROM 		SALES S JOIN SALE_DETAILS SD ON S.SALE_CODE = SD.SALE_CODE 
	       						JOIN 		ITEMS I ON SD.SALE_ITEM_CODE = I.ITEM_CODE 
			WHERE 		S.ORDER_PERMIT = 'Y' AND TO_CHAR(TRUNC(S.SALE_DATE), 'YYYY') = #{saleDate} 
			GROUP BY	TO_CHAR(TRUNC(S.SALE_DATE), 'YYYY-MM')
			ORDER BY    1
		]]>
	</select>
	
	<!-- 순익 차트 : 그룹 기준(일) -->
	<select id="getProfitChartMonth" resultType="map">
		<![CDATA[
			SELECT 		TO_CHAR(TRUNC(S.SALE_DATE)) AS "profitDay",
					 	SUM((SD.SALE_PRICE - I.SUPPLY_PRICE) * SD.SALE_QTY) AS "profitSum" 
			FROM 		SALES S JOIN SALE_DETAILS SD ON S.SALE_CODE = SD.SALE_CODE 
        						JOIN 		ITEMS I ON SD.SALE_ITEM_CODE = I.ITEM_CODE 
			WHERE 		S.ORDER_PERMIT = 'Y' AND TO_CHAR(TRUNC(S.SALE_DATE), 'YYYY-MM') = #{saleDate} 
			GROUP BY 	TO_CHAR(TRUNC(S.SALE_DATE))
            ORDER BY    1
		]]>
	</select>
	
	<!-- 품목별 판매량 TOP 차트 : 그룹 기준 (월) -->
	<select id="getTopItemChartYear" resultType="map">
		<![CDATA[
			SELECT * 
			FROM 	(	SELECT      sd.SALE_ITEM_NAME AS "saleItem", SUM(sd.SALE_QTY) AS "saleQty" 
						FROM        sales s JOIN sale_details sd ON s.sale_code = sd.sale_code 
						WHERE       s.ORDER_PERMIT = 'Y' AND TO_CHAR(TRUNC(S.SALE_DATE), 'YYYY') = #{saleDate} 
						GROUP BY	sd.SALE_ITEM_NAME 
						ORDER BY    2 DESC ) 
			WHERE ROWNUM <= 5
		]]>
	</select>
	
	
	<!-- 품목별 판매량 TOP 차트 : 그룹 기준 (일) -->
	<select id="getTopItemChartMonth" resultType="map">
		<![CDATA[
			SELECT * 
			FROM 	(	SELECT      SD.SALE_ITEM_NAME 	AS 	"saleItem"
									, SUM(SD.SALE_QTY) 	AS 	"saleQty" 
						FROM        SALES S JOIN SALE_DETAILS SD 
												ON S.SALE_CODE = SD.SALE_CODE 
						WHERE       S.ORDER_PERMIT = 'Y' 
							AND 	TO_CHAR(TRUNC(S.SALE_DATE), 'YYYY-MM') = #{saleDate} 
						GROUP BY	SD.SALE_ITEM_NAME 
						ORDER BY    2 DESC ) 
			WHERE ROWNUM <= 5
		]]>
	</select>
	
	<!-- 판매처별 판매량 TOP 차트 : 그룹 기준 (월) -->
	<select id="getTopCustomerChartYear" resultType="map">
		<![CDATA[
			SELECT * 
			FROM 	(	SELECT      C.CUSTOMER_NAME 	AS 	"customerName"
									, SUM(SD.SALE_QTY) 	AS 	"saleQty" 
						FROM        CUSTOMERS C JOIN SALES S 
													ON C.CUSTOMER_CODE = S.CUSTOMER_CODE
                                                JOIN SALE_DETAILS SD 
                                                	ON S.SALE_CODE = SD.SALE_CODE 
						WHERE       S.ORDER_PERMIT = 'Y' 
							AND 	TO_CHAR(TRUNC(S.SALE_DATE), 'YYYY') = #{saleDate} 
						GROUP BY	c.CUSTOMER_NAME
						ORDER BY    2 DESC ) 
			WHERE ROWNUM <= 5		
		]]>	
	</select>
	
	<!-- 판매처별 판매량 TOP 차트 : 그룹 기준 (일) -->
	<select id="getTopCustomerChartMonth" resultType="map">
		<![CDATA[
			SELECT * 
			FROM 	(	SELECT      C.CUSTOMER_NAME 	AS 	"customerName"
									, SUM(SD.SALE_QTY) 	AS 	"saleQty" 
						FROM        CUSTOMERS C JOIN SALES S 
													ON C.CUSTOMER_CODE = S.CUSTOMER_CODE
                                                JOIN SALE_DETAILS SD 
                                                	ON S.SALE_CODE = SD.SALE_CODE 
						WHERE       S.ORDER_PERMIT = 'Y' 
							AND 	TO_CHAR(TRUNC(S.SALE_DATE), 'YYYY-MM') = #{saleDate} 
						GROUP BY	C.CUSTOMER_NAME
						ORDER BY    2 DESC ) 
			WHERE ROWNUM <= 5		
		]]>	
	</select>
	
	<!-- 메인 화면 차트 처리 : Bubble Chart | X축(판매량), Y축(판매가), 버블 크기(재고량), 버블 제목(품목명), 차트 범위(대분류 설명) -->
	<select id="getBubbleChart" resultType="map">
		<![CDATA[
			SELECT		*
			FROM	(	SELECT 		IT.ITEM_NAME 		AS 	"itemName"
									, LV.DESCRIPTIONS 	AS 	"itemCategory"
									, SO.ONHAND_QTY 	AS 	"itemQty"
									, SD.SALE_PRICE 	AS 	"itemPrice"
									, SUM(SD.SALE_QTY) 	AS 	"saleQty" 
						FROM        LOOKUP_VALUES LV JOIN ( SELECT 	SUBSTR(ITEM_CODE, 1, 1) ITEM_CATEGORY
																	, ITEM_CODE
																	, ITEM_NAME 
															FROM ITEMS  ) IT 
														ON 		LV.LOOKUP_CODE = IT.ITEM_CATEGORY 
													JOIN 	SALE_DETAILS SD 
														ON 		IT.ITEM_CODE = SD.SALE_ITEM_CODE 
													JOIN 	SALES S 
														ON 		S.SALE_CODE = SD.SALE_CODE 
													JOIN 	STOCK_ONHANDS SO 
														ON 		SO.ITEM_CODE = SD.SALE_ITEM_CODE 
						WHERE       LV.LOOKUP = 'ITEM_GROUP1' 
									AND S.ORDER_PERMIT = 'Y' 
									AND	(S.SALE_DATE BETWEEN SYSDATE - 30 AND SYSDATE) 
						GROUP BY    IT.ITEM_NAME, LV.DESCRIPTIONS, SO.ONHAND_QTY, SD.SALE_PRICE
						ORDER BY    IT.ITEM_NAME	)
			WHERE	ROWNUM <= 20
		]]>
	</select>
</mapper>